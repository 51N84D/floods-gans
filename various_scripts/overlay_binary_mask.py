import os
import cv2
import numpy as np


def overlay_binary(im_path, mask_path, output_path, color=(255, 0, 0), alpha=0.3):
    """
    Draw the binary mask on top of the input image
    :param im_path:       path of the image being segmented
    :param mask_path:     output of the segmentation
    :param output_path:   path to save overlay
    :param color:         color for the overlay (B,G,R)
    :param alpha:         strength of the overlay
  
    """
    im = cv2.imread(im_path)
    mask = cv2.imread(mask_path)
    mask = cv2.resize(mask, (im.shape[1], im.shape[0]))
    mask = mask[:, :, 0] != 0
    mask_colored = np.zeros_like(im)
    mask_colored[mask] = color

    new_im = cv2.addWeighted(mask_colored, alpha, im, 1 - alpha, 0)
    cv2.imwrite(output_path, new_im)


def overlay_flood_mask(dir_results, dir_output):
    """
  Use the overlay function to overlay the 'flood region' generated by instagan
  :param dir_results: [opt.checkpoints_dir]/[opt.name]/web/images/
  :param dir_output:     directory to save the results
  """
    im_list = os.listdir(dir_results)
    im_list = np.sort(im_list)

    for im_index in range(len(im_list)):
        if im_index % 12 == 0:
            im_epoch = im_list[im_index : im_index + 12]  # image generated each epoch
            im_path = dir_results + im_epoch[4]  # real_A_img
            mask_path = dir_results + im_epoch[3]  # fake_B_seg

            overlay_binary(
                im_path, mask_path, dir_output + im_list[im_index][:8] + ".png"
            )

